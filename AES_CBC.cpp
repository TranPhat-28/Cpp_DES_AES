#include <iostream>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <iterator>
//Support Vietnamese
#include <io.h>
#include <fcntl.h>
#include <string>
using std::string;
using std::wstring;
#include <locale>
using std::wstring_convert;
#include <codecvt>
using  std::codecvt_utf8;
using namespace std;

// -------------------------------------------------------
// ------- Các bảng sẽ sử dụng để mã và giải mã ----------
// -------------------------------------------------------


// Encryption: Forward Rijndael S-box 
// Bảng Substition
// Sử dụng trong bước SubBytes của Encrypt
unsigned char sbox[256] =
{
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

// Encryption: Nhân 2 trong bước MixColumns của Encryption
unsigned char mul2[] =
{
	0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
	0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
	0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
	0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
	0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
	0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
	0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
	0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
	0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
	0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
	0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
	0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
	0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
	0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
	0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
	0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

// Encryption: Nhân 3 trong bước MixColumns của Encryption
unsigned char mul3[] =
{
	0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
	0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
	0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
	0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
	0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
	0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
	0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
	0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
	0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
	0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
	0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
	0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
	0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
	0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
	0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
	0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

// Bảng rCon, sử dụng trong tạo Round key
unsigned char rcon[256] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

// Decryption: Inverse Rijndael S-box
unsigned char inv_s[256] =
{
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

// Decryption: Nhân 9 trong bước InversionMixColumns của Decryption để trả lại giá trị ban đầu
unsigned char mul9[256] =
{
	0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
	0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
	0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
	0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
	0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
	0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
	0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
	0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
	0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
	0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
	0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
	0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
	0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
	0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
	0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
	0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

// Decryption: Nhân 11 trong bước InversionMixColumns của Decryption để trả lại giá trị ban đầu
unsigned char mul11[256] =
{
	0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
	0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
	0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
	0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
	0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
	0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
	0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
	0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
	0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
	0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
	0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
	0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
	0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
	0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
	0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
	0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

// Decryption: Nhân 13 trong bước InversionMixColumns của Decryption để trả lại giá trị ban đầu
unsigned char mul13[256] =
{
	0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
	0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
	0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
	0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
	0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
	0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
	0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
	0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
	0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
	0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
	0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
	0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
	0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
	0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
	0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
	0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

// Decryption: Nhân 14 trong bước InversionMixColumns của Decryption để trả lại giá trị ban đầu
unsigned char mul14[256] =
{
	0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
	0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
	0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
	0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
	0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
	0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
	0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
	0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
	0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
	0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
	0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
	0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
	0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
	0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
	0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
	0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};


//-----------------------------------------------------
//------- Các hàm trong quá trình mã hoá AES ----------
//-----------------------------------------------------

// Auxiliary function for KeyExpansion
void KeyExpansionCore(unsigned char * in, unsigned char i) {
	// Shift trái một bit
	unsigned char t = in[0];
	in[0] = in[1];
	in[1] = in[2];
	in[2] = in[3];
	in[3] = t;

	// S-box 4 bytes 
	in[0] = sbox[in[0]];
	in[1] = sbox[in[1]];
	in[2] = sbox[in[2]];
	in[3] = sbox[in[3]];

	// RCon
	in[0] ^= rcon[i];
}

// Hàm tạo random Key
// Tạo ra key cho từng round dựa trên Key được người dùng input ban đầu
// 11 key bao gồm cả key được input ban đầu sẽ được lưu lại trong expandedKeys
void KeyExpansion(unsigned char inputKey[16], unsigned char expandedKeys[176]) {
	// 128 bits đầu tiên là Key được nhập ban đầu
	for (int i = 0; i < 16; i++) {
		expandedKeys[i] = inputKey[i];
	}

	int bytesGenerated = 16; // Biến đếm số byte key đã được tạo
	int rconIteration = 1; // Theo dõi giá trị của rCon
	unsigned char tmpCore[4]; // Biến lưu Core tạm thời

	while (bytesGenerated < 176) {
		// Đọc 4 bytes vào Core
		// Đó là 4 bytes vừa được tạo liền trước
		// Initially, these will be the final 4 bytes of the original key
		for (int i = 0; i < 4; i++) {
			tmpCore[i] = expandedKeys[i + bytesGenerated - 4];
		}
		// Thực hiện Core một lần đối với mỗi key 16 byte
		if (bytesGenerated % 16 == 0) {
			KeyExpansionCore(tmpCore, rconIteration++);
		}
		for (unsigned char a = 0; a < 4; a++) {
			expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ tmpCore[a];
			bytesGenerated++;
		}

	}
}


// AddRoundKey: Thực hiện XOR với round key
// Note: Vòng ban đầu - Initial Round chính là XorRoundKey
void AddRoundKey(unsigned char * state, unsigned char * roundKey) {
	for (int i = 0; i < 16; i++) {
		state[i] ^= roundKey[i];
	}
}

// SubBytes: Thực hiện thay thế từng byte thành một byte khác
// Bằng cách sử dụng Bảng S-Box và thay thế các byte tương ứng
void SubBytes(unsigned char * state) {
	for (int i = 0; i < 16; i++) {
		state[i] = sbox[state[i]];
	}
}

// ShiftRows: Thực hiện dịch trái n bit đối với hàng thứ n
//
//  |0  4  8 12|   --Shift[0]-->  | 0  4  8 12|
//  |1  5  9 13|   --Shift[1]-->  | 5  9 13  1|
//  |2  6 10 14|   --Shift[2]-->  |10 14  2  6|
//  |3  7 11 15|   --Shift[3]-->  |15  3  7 11|
void ShiftRows(unsigned char * state) {
	unsigned char tmp[16];

	// Cột thứ nhất
	tmp[0] = state[0];
	tmp[1] = state[5];
	tmp[2] = state[10];
	tmp[3] = state[15];
	
	// Cột thứ hai
	tmp[4] = state[4];
	tmp[5] = state[9];
	tmp[6] = state[14];
	tmp[7] = state[3];

	// Cột thứ ba
	tmp[8] = state[8];
	tmp[9] = state[13];
	tmp[10] = state[2];
	tmp[11] = state[7];
	
	// Cột thứ tư
	tmp[12] = state[12];
	tmp[13] = state[1];
	tmp[14] = state[6];
	tmp[15] = state[11];

	// Cập nhật lại vào state
	for (int i = 0; i < 16; i++) {
		state[i] = tmp[i];
	}
}

/* 
MixColumns: Thực hiện tính toán nhân ma trận
- Mỗi cột của ma trận state (C0, C1, C2, C3) sẽ được tính toán riêng
- Sau đó kết quả tính được (C'0, C'1, C'2, C'3) sẽ được cập nhật lại vào cột tương ứng
- Công thức tính cho từng cột như sau:
	C'0 = 02 * C0 + 01 * C1 + 01 * C2 + 03 * C3
	C'1 = 03 * C0 + 02 * C1 + 01 * C2 + 01 * C3
	C'2 = 01 * C0 + 03 * C1 + 02 * C2 + 01 * C3
	C'3 = 01 * C0 + 01 * C1 + 03 * C2 + 02 * C3
- Sử dụng các bảng mul đã khai báo để tính toán
*/
void MixColumns(unsigned char * state) {
	unsigned char tmp[16];

	tmp[0] = (unsigned char) mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3];
	tmp[1] = (unsigned char) state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3];
	tmp[2] = (unsigned char) state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]];
	tmp[3] = (unsigned char) mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]];

	tmp[4] = (unsigned char)mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7];
	tmp[5] = (unsigned char)state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7];
	tmp[6] = (unsigned char)state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]];
	tmp[7] = (unsigned char)mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]];

	tmp[8] = (unsigned char)mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11];
	tmp[9] = (unsigned char)state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11];
	tmp[10] = (unsigned char)state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]];
	tmp[11] = (unsigned char)mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]];

	tmp[12] = (unsigned char)mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15];
	tmp[13] = (unsigned char)state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15];
	tmp[14] = (unsigned char)state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]];
	tmp[15] = (unsigned char)mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]];

	// Cập nhật lại kết quả vào ma trận State
	for (int i = 0; i < 16; i++) {
		state[i] = tmp[i];
	}
}

// Hàm thực hiện Round mã hoá
// Đối với AES 128 sẽ thực hiện 9 Round mã hoá + Final Round = 10
// Mỗi Round bao gồm 4 bước: SubBytes; ShiftRows; MixColumns; AddRoundKey
void Round(unsigned char * state, unsigned char * key) {
	SubBytes(state);
	ShiftRows(state);
	MixColumns(state);
	AddRoundKey(state, key);
}

// Hàm thực hiện Final Round ( Round thứ 10 )
// Final Round cũng ương tự như Round nhưng không có bước MixColumns
void FinalRound(unsigned char * state, unsigned char * key) {
	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, key);
}

//---------------------------------------------------------
//-------------------AES Encryption------------------------
//---------------------------------------------------------

//Sắp xếp tất cả các hàm khác vào một hàm mã hoá duy nhất
void AESEncrypt(unsigned char * message, unsigned char * expandedKey, unsigned char * encryptedMessage) {
	// Lưu lại 16 byte đầu tiên của plaintext
	unsigned char state[16];

	for (int i = 0; i < 16; i++) {
		state[i] = message[i];
	}

	// Số vòng mã hoá ( không tính vòng đầu và vòng cuối )
	int numberOfRounds = 9;

	// Vòng ban đầu ( Initial Round )
	AddRoundKey(state, expandedKey);

	// Vòng lặp 9 lần, thực hiện 9 vòng
	for (int i = 0; i < numberOfRounds; i++) {
		Round(state, expandedKey + (16 * (i+1)));
	}

	// Vòng cuối ( Final Round )
	FinalRound(state, expandedKey + 160);

	// Lưu lại ciphertext
	for (int i = 0; i < 16; i++) {
		encryptedMessage[i] = state[i];
	}
}

//---------------------------------------------------------------
//--------- Các hàm thực hiện trong quá trình giải mã -----------
//---------------------------------------------------------------


// Dùng trong các vòng giải mã ( RoundDe )
// Tương tự như AddRoundKey trong mã hoá, thực hiện XOR với key 128 bit
// Đồng thời là vòng cuối cùng ( Final Round ) trong quá trình giải mã
void SubRoundKeyDe(unsigned char * state, unsigned char * roundKey) {
	for (int i = 0; i < 16; i++) {
		state[i] ^= roundKey[i];
	}
}

// InverseMixColumns: Tương tự như bước MixColumns trong mã hoá
// Để đảo ngược lại MixColumns của việc mã hoá, ta thực hiện với mul9, mul11, mul13, mul14
void InverseMixColumnsDe(unsigned char * state) {
	unsigned char tmp[16];

	tmp[0] = (unsigned char)mul14[state[0]] ^ mul11[state[1]] ^ mul13[state[2]] ^ mul9[state[3]];
	tmp[1] = (unsigned char)mul9[state[0]] ^ mul14[state[1]] ^ mul11[state[2]] ^ mul13[state[3]];
	tmp[2] = (unsigned char)mul13[state[0]] ^ mul9[state[1]] ^ mul14[state[2]] ^ mul11[state[3]];
	tmp[3] = (unsigned char)mul11[state[0]] ^ mul13[state[1]] ^ mul9[state[2]] ^ mul14[state[3]];

	tmp[4] = (unsigned char)mul14[state[4]] ^ mul11[state[5]] ^ mul13[state[6]] ^ mul9[state[7]];
	tmp[5] = (unsigned char)mul9[state[4]] ^ mul14[state[5]] ^ mul11[state[6]] ^ mul13[state[7]];
	tmp[6] = (unsigned char)mul13[state[4]] ^ mul9[state[5]] ^ mul14[state[6]] ^ mul11[state[7]];
	tmp[7] = (unsigned char)mul11[state[4]] ^ mul13[state[5]] ^ mul9[state[6]] ^ mul14[state[7]];

	tmp[8] = (unsigned char)mul14[state[8]] ^ mul11[state[9]] ^ mul13[state[10]] ^ mul9[state[11]];
	tmp[9] = (unsigned char)mul9[state[8]] ^ mul14[state[9]] ^ mul11[state[10]] ^ mul13[state[11]];
	tmp[10] = (unsigned char)mul13[state[8]] ^ mul9[state[9]] ^ mul14[state[10]] ^ mul11[state[11]];
	tmp[11] = (unsigned char)mul11[state[8]] ^ mul13[state[9]] ^ mul9[state[10]] ^ mul14[state[11]];

	tmp[12] = (unsigned char)mul14[state[12]] ^ mul11[state[13]] ^ mul13[state[14]] ^ mul9[state[15]];
	tmp[13] = (unsigned char)mul9[state[12]] ^ mul14[state[13]] ^ mul11[state[14]] ^ mul13[state[15]];
	tmp[14] = (unsigned char)mul13[state[12]] ^ mul9[state[13]] ^ mul14[state[14]] ^ mul11[state[15]];
	tmp[15] = (unsigned char)mul11[state[12]] ^ mul13[state[13]] ^ mul9[state[14]] ^ mul14[state[15]];

	// Cập nhật lại ma trận state
	for (int i = 0; i < 16; i++) {
		state[i] = tmp[i];
	}
}

// ShiftsRows: Thực hiện dịch bit sang phải thay vì trái để giải mã
void ShiftRowsDe(unsigned char * state) {
	unsigned char tmp[16];

	// Cột thứ nhất
	tmp[0] = state[0];
	tmp[1] = state[13];
	tmp[2] = state[10];
	tmp[3] = state[7];

	// Cột thứ hai
	tmp[4] = state[4];
	tmp[5] = state[1];
	tmp[6] = state[14];
	tmp[7] = state[11];

	// Cột thứ ba
	tmp[8] = state[8];
	tmp[9] = state[5];
	tmp[10] = state[2];
	tmp[11] = state[15];

	// Cột thứ tư
	tmp[12] = state[12];
	tmp[13] = state[9];
	tmp[14] = state[6];
	tmp[15] = state[3];

	// Cập nhật lại ma trận state
	for (int i = 0; i < 16; i++) {
		state[i] = tmp[i];
	}
}


// SubBytes: Thực hiện substition với S-box đảo ngược để giải mã
void SubBytesDe(unsigned char * state) {
	for (int i = 0; i < 16; i++) { // Perform substitution to each of the 16 bytes
		state[i] = inv_s[state[i]];
	}
}

//----------------------------------------------------------------------
//------------------ Hàm thực hiện một round giải mã AES ---------------
//----------------------------------------------------------------------

// Thực hiện trên block 128 bits
// Các bước tương tự với Round mã hoá nhưng ngược lại
void RoundDe(unsigned char * state, unsigned char * key) {
	SubRoundKeyDe(state, key);
	InverseMixColumnsDe(state);
	ShiftRowsDe(state);
	SubBytesDe(state);
}

// Vòng ban đầu ( Initial Round ) giống Round nhưng không có bước InverseMixColumns
void InitialRoundDe(unsigned char * state, unsigned char * key) {
	SubRoundKeyDe(state, key);
	ShiftRowsDe(state);
	SubBytesDe(state);
}

// Hàm thực hiện giải mã AES
// Tổ chức các hàm khác vào cùng một hàm để tiện gọi
void AESDecryptDe(unsigned char * encryptedMessage, unsigned char * expandedKey, unsigned char * decryptedMessage)
{
	// 16 byte đầu tiên của ciphertext
	unsigned char state[16];

	for (int i = 0; i < 16; i++) {
		state[i] = encryptedMessage[i];
	}

	// Thực hiện vòng ban đầu
	InitialRoundDe(state, expandedKey+160);

	// Đếm số round
	int numberOfRounds = 9;

	// Vòng lặp thực hiện 9 round giải mã
	for (int i = 8; i >= 0; i--) {
		RoundDe(state, expandedKey + (16 * (i + 1)));
	}

	// SubRoundKey chính là round cuối cùng ( Final Round )
	SubRoundKeyDe(state, expandedKey);

	// Lưu lại kết quả
	for (int i = 0; i < 16; i++) {
		decryptedMessage[i] = state[i];
	}
}

// --------Các hàm hỗ trợ chuyển đổi string---------------
// Hàm chuyển từ string sang Hex đúng định dạng input
string StringToHex(string input)
{
    ostringstream result;
    result << setw(2) << hex;
    copy(input.begin(), input.end(), std::ostream_iterator<unsigned int>(result, " "));
    return result.str();
}

/* convert string to wstring */
wstring string_to_wstring (const std::string& str)
{
    wstring_convert<codecvt_utf8<wchar_t>> towstring;
    return towstring.from_bytes(str);
}

/* convert wstring to string */
string wstring_to_string (const std::wstring& str)
{
    wstring_convert<codecvt_utf8<wchar_t>> tostring;
    return tostring.to_bytes(str);
}

// Convert from int to hex
template <class T>
string intToHex(T t, ios_base & (*f)(ios_base&))
{
	ostringstream oss;
	oss << f << t;
	return oss.str();
}

// Convert Hex to string
string HexToString(string hex)
{
	int len = hex.length();
	std::string newString;
	for(int i=0; i< len; i+=2)
	{
		string byte = hex.substr(i,2);
		char chr = (char) (int)strtol(byte.c_str(), NULL, 16);
		newString.push_back(chr);
	}
	return newString;
}

// convert UTF-8 string to wstring
std::wstring utf8_to_wstring (const std::string& str)
{
    wstring_convert<codecvt_utf8<wchar_t>> myconv;
    return myconv.from_bytes(str);
}


int main() {
	// Support tiếng việt
	_setmode(_fileno(stdin), _O_U16TEXT);
 	_setmode(_fileno(stdout), _O_U16TEXT);

	// Biến lưu plaintext
	wstring wmessage;
	string message;
	// Nhập plaintext để mã hoá
	wcout << "Enter the message to encrypt: ";
	getline(wcin, wmessage);
	//wcin >> wmessage;
	fflush(stdin);

	// Chuyển wstring input sang string để mã hoá
	message = wstring_to_string(wmessage);

	// Biến lưu độ dài plaintext ban đầu
	int originalLen = message.length();
	// Biến lưu độ dài plaintext ban đầu
	int paddedMessageLen = originalLen;

	// Tính toán độ dài của plaintext sau khi được padding
	if ((paddedMessageLen % 16) != 0) {
		paddedMessageLen = (paddedMessageLen / 16 + 1) * 16;
	}

	// Tạo biến mới để pad plaintext
	unsigned char * paddedMessage = new unsigned char[paddedMessageLen];
	for (int i = 0; i < paddedMessageLen; i++) {
		// Gán plaintext cũ
		if (i >= originalLen) {
			paddedMessage[i] = 0;
		}
		// Gán thêm phần padding vào
		else {
			paddedMessage[i] = message[i];
		}
	}

	// Tạo biến mới để lưu ciphertext với độ dài bằng với plaintext đã padding
	unsigned char * encryptedMessage = new unsigned char[paddedMessageLen];

	// Người dùng nhập key và kiểm tra độ dài đúng 16 hay không
	wstring winput_key;
	string input_key;
	wcout << "Input key (16byte): ";
	do{
		wcin >> winput_key;
		if (winput_key.length() != 16)
		{
			wcout << "Invalid length" << endl;
		}
	}while (winput_key.length() != 16);

	// Chuyển key từ wstring được input sang string
	input_key = wstring_to_string(winput_key);
	// Chuyển đổi từ key người dùng input sang đúng định dạng
	string str = StringToHex(input_key);

	// Người dùng nhập iv và kiểm tra độ dài đúng 16 hay không
	wstring winput_iv;
	string input_iv;
	wcout << "Input iv (16byte) : ";
	do{
		wcin >> winput_iv;
		if (winput_iv.length() != 16)
		{
			wcout << "Invalid length" << endl;
		}
	}while (winput_iv.length() != 16);

	// Chuyển iv từ wstring được input sang string
	input_iv = wstring_to_string(winput_iv);
	// Chuyển đổi từ key người dùng input sang đúng định dạng
	string iv_str = StringToHex(input_iv);

	// In ra màn hình các thông tin
	system("cls");
	wcout << "----128-bit AES Encryption" << endl;
	wcout << "Plaintext: " << wmessage << endl;
	wcout << "Key: " << winput_key << endl;
	wcout << "IV : " << winput_iv << endl;

	// Chuyển Key sang dạng mảng
	istringstream hex_chars_stream(str);
	unsigned char* key = new unsigned char[16];
	int z = 0;
	unsigned int c;
	while (hex_chars_stream >> hex >> c)
	{
		key[z] = c;
		z++;
	}

	// Chuyển IV sang dạng mảng
	istringstream hex_chars_stream2(iv_str);
	unsigned char* iv = new unsigned char[16];
	int l = 0;
	unsigned int f;
	while (hex_chars_stream >> hex >> f)
	{
		key[l] = f;
		l++;
	}

	// Dùng để lưu Key được mở rộng (Round Key)
	unsigned char expandedKey[176];

	// Gọi hàm thực hiện tạo Key
	KeyExpansion(key, expandedKey);

	// Mã hoá theo mode CBC
	// XOR plaintext với iv rồi mã hoá block đầu tiên
	for ( int i = 0; i < 16; i++)
	{
		paddedMessage[i] ^= iv[i];
	}
	AESEncrypt(paddedMessage, expandedKey, encryptedMessage);

	for (int i = 16; i < paddedMessageLen; i += 16) 
	{
		// XOR với các block ciphertext liền trước rồi mã hoá
		for ( int j = i; j < i + 16; j++)
			paddedMessage[j] ^= encryptedMessage[j - 16]; 
		AESEncrypt(paddedMessage + i, expandedKey, encryptedMessage + i);
	}

	// In ra ciphertext
	wcout << "Encrypted message (HEX):" << endl;
	for (int i = 0; i < paddedMessageLen; i++) {
		wcout << hex << (int) encryptedMessage[i];
		wcout << " ";
	}
	wcout << endl;

	// Output vào file "message.txt"
	ofstream outfile;
	outfile.open("message.txt", ios::out | ios::binary);
	if (outfile.is_open())
	{
		outfile << encryptedMessage;
		outfile.close();
		wcout << "Wrote encrypted message to file message.txt" << endl;
	}
	else wcout << "Unable to open file";

	// Xoá bộ nhớ
	delete[] paddedMessage;
	delete[] encryptedMessage;

	wcout << "----128-bit AES Decryption" << endl;

	string msgstrDe;
	ifstream infile;
	infile.open("message.txt", ios::in | ios::binary);

	if (infile.is_open())
	{
		getline(infile, msgstrDe); // Đọc ciphertext đã được lưu từ file

		//wcout << "Ciphertext: " << msgstrDe << endl;
		infile.close();
	}
	else wcout << "Unable to open file";

	// Chuyển ciphertext sang dạng mảng
	char * msgDe = new char[msgstrDe.size()+1];
	strcpy(msgDe, msgstrDe.c_str());

	// Độ dài ciphertext
	int n = strlen((const char*)msgDe);

	unsigned char * encryptedMessageDe = new unsigned char[n];
	for (int i = 0; i < n; i++) {
		encryptedMessageDe[i] = (unsigned char)msgDe[i];
	}

	// Dùng chung key cho encrypt và decrypt
	// Ta sử dụng lại biếnt expandedKey cho giải mã
	int messageLenDe = strlen((const char *)encryptedMessageDe);

	unsigned char * decryptedMessageDe = new unsigned char[messageLenDe];

	// Giải mã theo mode CBC
	// Giải mã khối 16 bytes đầu tiên rồi XOR với iv 
	AESDecryptDe(encryptedMessageDe, expandedKey, decryptedMessageDe);

	for (int i = 0; i < 16; i++)
		decryptedMessageDe[i] ^= iv[i];
	//Giải mã các khối sau còn lại và XOR với khối cipher liền trước
	for (int i = 16; i < messageLenDe; i += 16) {
		AESDecryptDe(encryptedMessageDe + i, expandedKey, decryptedMessageDe + i);
		for (int j = i; j < i + 16; j++)
			decryptedMessageDe[j] ^= encryptedMessageDe[j - 16];
	}
	if (messageLenDe < 32)
		messageLenDe = 16;

/*
	// Xuất recovered text dạng HEX
	wcout << "Decrypted message (HEX):" << endl;
	for (int i = 0; i < messageLenDe; i++) {
		wcout << hex << (int)decryptedMessageDe[i];
		wcout << " ";
	}
	wcout << endl;
	
	// Xuất recovered text, đã bỏ padding
	wcout << "Decrypted message (Padding removed): " << endl;
	for (int i = 0; i < originalLen; i++) {
		wcout << decryptedMessageDe[i];
	}
	wcout << endl;
*/

	string decrypted = "";
	for (int i = 0; i < messageLenDe; i++) {
		decrypted += intToHex((int)decryptedMessageDe[i], hex);
	}
	string recovered = HexToString(decrypted);
	wstring wrecovered = utf8_to_wstring(recovered);
	wcout << "Recovered text: "<< wrecovered << endl;
	return 0;
}